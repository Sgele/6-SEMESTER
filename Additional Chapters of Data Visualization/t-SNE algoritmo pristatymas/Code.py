# -*- coding: utf-8 -*-
"""t-sne.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2_Hqg_jsCm5hIDs01qiIaxNiDsWFur6

**BIBLIOTEKOS**
"""

# Commented out IPython magic to ensure Python compatibility.
from time import time

import numpy as np
import pandas as pd


# For plotting
from matplotlib import offsetbox
import matplotlib.pyplot as plt
import matplotlib.patheffects as PathEffects
import seaborn as sns

# %matplotlib inline
sns.set(style='white', context='notebook', rc={'figure.figsize':(14,10)})

#For standardising the dat
from sklearn.preprocessing import StandardScaler

#PCA
from sklearn.manifold import TSNE

#Ignore warnings
import warnings
warnings.filterwarnings('ignore')

from sklearn import datasets

from sklearn import manifold


from sklearn import manifold
from scipy.stats import norm
import tensorflow as tf

def KL_div(P, Q):
    # kovertuojam i masyvus
    P = np.array(P)
    Q = np.array(Q)

    # skaiciuojam vidurkius
    mu_P = np.mean(P, axis=0)
    mu_Q = np.mean(Q, axis=0)

    # skaiciuojame kovariacija
    cov_P = np.cov(P, rowvar=False)
    cov_Q = np.cov(Q, rowvar=False)

    cov_Q_inv = np.linalg.inv(cov_Q)

    # skaiciuojame KL divergencija
    KL_div = np.log(np.linalg.det(cov_Q)/np.linalg.det(cov_P)) - mu_P.shape[0] + np.trace(cov_Q_inv@cov_P) + \
                (mu_P - mu_Q).T@cov_Q_inv@(mu_P - mu_Q)

    KL_div = 0.5 * KL_div

    return KL_div

"""**Iris**

Nuskaitome duomenis, juos standartizuojame ir pasidarome lenetlės pavidalu
"""

iris = pd.read_csv('Iris.csv')

iris.drop('Id', axis=1, inplace=True)
iris_x = iris.drop(['Species'], axis=1)
iris_y = iris['Species']

iris_sc = StandardScaler().fit_transform(iris_x)
iris_sc_df = pd.DataFrame(iris_sc)
iris_sc_df.head()

"""Keičiame perplexity parametrą: 10, 30, 40, 50, 70, 100"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=10, n_iter=300, random_state = 42)
iris_p10 = tsne.fit_transform(iris_sc_df)
iris_p10 = pd.DataFrame(iris_p10)
iris_p10.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p10['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, random_state = 42)
iris_p30 = tsne.fit_transform(iris_sc_df)
iris_p30 = pd.DataFrame(iris_p30)
iris_p30.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p30['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=40, n_iter=300, random_state = 42)
iris_p40 = tsne.fit_transform(iris_sc_df)
iris_p40 = pd.DataFrame(iris_p40)
iris_p40.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p40['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=300, random_state = 42)
iris_p50 = tsne.fit_transform(iris_sc_df)
iris_p50 = pd.DataFrame(iris_p50)
iris_p50.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p50['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=70, n_iter=300, random_state = 42)
iris_p70 = tsne.fit_transform(iris_sc_df)
iris_p70 = pd.DataFrame(iris_p70)
iris_p70.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p70['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=100, n_iter=300, random_state = 42)
iris_p100 = tsne.fit_transform(iris_sc_df)
iris_p100 = pd.DataFrame(iris_p100)
iris_p100.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_p100['label'] = iris_y

"""Vaizduojame gautus rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Iris dataset projections with different perplexities', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = iris_p10,
  hue = iris_p10['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Perplexity = 10', size=16)
axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = iris_p30,
  hue = iris_p30['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Perplexity = 30', size=16)
axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = iris_p40,
  hue = iris_p40['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Perplexity = 40', size=16)
axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = iris_p50,
  hue = iris_p50['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Perplexity = 50', size=16)
axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = iris_p70,
  hue = iris_p70['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Perplexity = 70', size=16)
axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = iris_p100,
  hue = iris_p100['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Perplexity = 100', size=16)
axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""Keičiame iteracijų skaičių: 300, 400, 500, 700, 1000, 2500"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=300, random_state = 42)
iris_i300 = tsne.fit_transform(iris_sc_df)
iris_i300 = pd.DataFrame(iris_i300)
iris_i300.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i300['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=400, random_state = 42)
iris_i400 = tsne.fit_transform(iris_sc_df)
iris_i400 = pd.DataFrame(iris_i400)
iris_i400.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i400['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, random_state = 42)
iris_i500 = tsne.fit_transform(iris_sc_df)
iris_i500 = pd.DataFrame(iris_i500)
iris_i500.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i500['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=700, random_state = 42)
iris_i700 = tsne.fit_transform(iris_sc_df)
iris_i700 = pd.DataFrame(iris_i700)
iris_i700.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i700['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=1000, random_state = 42)
iris_i1000 = tsne.fit_transform(iris_sc_df)
iris_i1000 = pd.DataFrame(iris_i1000)
iris_i1000.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i1000['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=2500, random_state = 42)
iris_i2500 = tsne.fit_transform(iris_sc_df)
iris_i2500 = pd.DataFrame(iris_i2500)
iris_i2500.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_i2500['label'] = iris_y

"""Vaizduojame gautus rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Iris dataset projections with different iteration numbers', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = iris_i300,
  hue = iris_i300['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Step = 300', size=16)
axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = iris_i400,
  hue = iris_i400['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Step = 400', size=16)
axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = iris_i500,
  hue = iris_i500['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Step = 500', size=16)
axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = iris_i700,
  hue = iris_i700['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Step = 700', size=16)
axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = iris_i1000,
  hue = iris_i1000['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Step = 1000', size=16)
axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = iris_i2500,
  hue = iris_i2500['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Step = 2500', size=16)
axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""Keičiame mokymosi greitį: 10, 100, 300, 500, 700, 1000"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 10, random_state = 42)
iris_lr10 = tsne.fit_transform(iris_sc_df)
iris_lr10 = pd.DataFrame(iris_lr10)
iris_lr10.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr10['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 100, random_state = 42)
iris_lr100 = tsne.fit_transform(iris_sc_df)
iris_lr100 = pd.DataFrame(iris_lr100)
iris_lr100.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr100['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 300, random_state = 42)
iris_lr300 = tsne.fit_transform(iris_sc_df)
iris_lr300 = pd.DataFrame(iris_lr300)
iris_lr300.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr300['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 500, random_state = 42)
iris_lr500 = tsne.fit_transform(iris_sc_df)
iris_lr500 = pd.DataFrame(iris_lr500)
iris_lr500.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr500['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 700, random_state = 42)
iris_lr700 = tsne.fit_transform(iris_sc_df)
iris_lr700 = pd.DataFrame(iris_lr700)
iris_lr700.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr700['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, learning_rate = 1000, random_state = 42)
iris_lr1000 = tsne.fit_transform(iris_sc_df)
iris_lr1000 = pd.DataFrame(iris_lr1000)
iris_lr1000.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_lr1000['label'] = iris_y

"""Vaizduojame gautus rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Iris dataset projections with different learning rates', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = iris_lr10,
  hue = iris_lr10['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Learning rate = 10', size=16)
axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = iris_lr100,
  hue = iris_lr100['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Learning rate = 100', size=16)
axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = iris_lr300,
  hue = iris_lr300['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Learning rate = 300', size=16)
axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = iris_lr500,
  hue = iris_lr500['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Learning rate = 500', size=16)
axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = iris_lr700,
  hue = iris_lr700['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Learning rate = 700', size=16)
axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = iris_lr1000,
  hue = iris_lr1000['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Learning rate = 1000', size=16)
axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""KL DIVERGENCIJA"""

tsne = TSNE(n_components = 2, verbose=1, perplexity=50, n_iter=500, random_state = 42)
iris_kl = tsne.fit_transform(iris_sc_df)
iris_kl = pd.DataFrame(iris_kl)

"""Keičiame metrikas: euclidean, chebyshev, cosine, mahalanobis, dice, yule"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'euclidean', random_state = 42)
iris_e = tsne.fit_transform(iris_sc_df)
iris_e = pd.DataFrame(iris_e)
iris_e.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_e['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'chebyshev', random_state = 42)
iris_ch = tsne.fit_transform(iris_sc_df)
iris_ch = pd.DataFrame(iris_ch)
iris_ch.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_ch['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'cosine', random_state = 42)
iris_c = tsne.fit_transform(iris_sc_df)
iris_c = pd.DataFrame(iris_c)
iris_c.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_c['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'mahalanobis', random_state = 42)
iris_m = tsne.fit_transform(iris_sc_df)
iris_m = pd.DataFrame(iris_m)
iris_m.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_m['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'dice', random_state = 42)
iris_d = tsne.fit_transform(iris_sc_df)
iris_d = pd.DataFrame(iris_d)
iris_d.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_d['label'] = iris_y

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=500, metric = 'yule', random_state = 42)
iris_yl = tsne.fit_transform(iris_sc_df)
iris_yl = pd.DataFrame(iris_yl)
iris_yl.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
iris_yl['label'] = iris_y

"""Vaizduojame gautus rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Iris dataset projections with different metrics', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = iris_e,
  hue = iris_e['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Euclidean', size=16)
axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = iris_ch,
  hue = iris_ch['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Chebyshev', size=16)
axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = iris_c,
  hue = iris_c['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Cosine', size=16)
axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = iris_m,
  hue = iris_m['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Mahalanobis', size=16)
axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = iris_d,
  hue = iris_d['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Dice', size=16)
axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = iris_yl,
  hue = iris_yl['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Yule', size=16)
axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""**Swiss_roll**

Nuskaitome duomenis, juos standartizuojame ir sudedame į lentelę
"""

swiss_roll = pd.read_csv('swiss_roll_example.csv', sep=';', header=None)

"""KL DIVERGENCIJA"""

# daliname i dvi grupes visa swiss_roll rinkini
swiss_roll_4feat_1 = swiss_roll.iloc[:200,]
swiss_roll_4feat_2 = swiss_roll.iloc[200:,]

KL_s_4feat = KL_div(swiss_roll_4feat_1, swiss_roll_4feat_2)
print("KL divergencija swiss_roll duomenu rinkinyje: %.3f" %KL_s_4feat)

# Divergencija gavome labai maza, kas yra labai gerai, kadangi ja skaiciavome duomenu rinkinyje, kuris neturi klasiu

sns.set_style("whitegrid") # darkgrid, whitegrid, dark, white, ticks
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(swiss_roll[0], swiss_roll[1], swiss_roll[2],
           c=swiss_roll[2])
ax.view_init(azim=-70, elev=6)
plt.show()

swiss_sc = StandardScaler().fit_transform(swiss_roll)
swiss_sc_df = pd.DataFrame(swiss_sc)
swiss_sc_df.head()

"""Keičiane perpleksiškumo parametrą: 10, 30, 40, 50, 70, 100"""

tsne = manifold.TSNE(n_components = 2, perplexity=10, random_state = 42)
swiss_p10 = tsne.fit_transform(swiss_sc_df)
swiss_p10 = pd.DataFrame(swiss_p10, columns = ['comp_1', 'comp_2'])
swiss_p10['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=30, random_state = 42)
swiss_p30 = tsne.fit_transform(swiss_sc_df)
swiss_p30 = pd.DataFrame(swiss_p30, columns = ['comp_1', 'comp_2'])
swiss_p30['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=40, random_state = 42)
swiss_p40 = tsne.fit_transform(swiss_sc_df)
swiss_p40 = pd.DataFrame(swiss_p40, columns = ['comp_1', 'comp_2'])
swiss_p40['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, random_state = 42)
swiss_p50 = tsne.fit_transform(swiss_sc_df)
swiss_p50 = pd.DataFrame(swiss_p50, columns = ['comp_1', 'comp_2'])
swiss_p50['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=70, random_state = 42)
swiss_p70 = tsne.fit_transform(swiss_sc_df)
swiss_p70 = pd.DataFrame(swiss_p70, columns = ['comp_1', 'comp_2'])
swiss_p70['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=100, random_state = 42)
swiss_p100 = tsne.fit_transform(swiss_sc_df)
swiss_p100 = pd.DataFrame(swiss_p100, columns = ['comp_1', 'comp_2'])
swiss_p100['y'] = swiss_roll[2]

"""Vizualizuojame rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Swiss_roll dataset projections with different perplexities', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(swiss_p10['comp_1'], swiss_p10['comp_2'], c = swiss_p10['y'])
axes[0,0].set_title('Perplexity = 10', size=16)

axes[0,1].scatter(swiss_p30['comp_1'], swiss_p30['comp_2'], c = swiss_p30['y'])
axes[0,1].set_title('Perplexity = 30', size=16)

axes[0,2].scatter(swiss_p40['comp_1'], swiss_p40['comp_2'], c = swiss_p40['y'])
axes[0,2].set_title('Perplexity = 40', size=16)

axes[1,0].scatter(swiss_p50['comp_1'], swiss_p50['comp_2'], c = swiss_p50['y'])
axes[1,0].set_title('Perplexity = 50', size=16)

axes[1,1].scatter(swiss_p70['comp_1'], swiss_p70['comp_2'], c = swiss_p70['y'])
axes[1,1].set_title('Perplexity = 70', size=16)

axes[1,2].scatter(swiss_p100['comp_1'], swiss_p100['comp_2'], c = swiss_p100['y'])
axes[1,2].set_title('Perplexity = 100', size=16)

plt.show()

"""Keičiame iteracijų skaičių: 300, 400, 500, 700, 1000, 2500"""

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 300, random_state = 42)
swiss_i300 = tsne.fit_transform(swiss_sc_df)
swiss_i300 = pd.DataFrame(swiss_i300, columns = ['comp_1', 'comp_2'])
swiss_i300['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 400, random_state = 42)
swiss_i400 = tsne.fit_transform(swiss_sc_df)
swiss_i400 = pd.DataFrame(swiss_i400, columns = ['comp_1', 'comp_2'])
swiss_i400['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, random_state = 42)
swiss_i500 = tsne.fit_transform(swiss_sc_df)
swiss_i500 = pd.DataFrame(swiss_i500, columns = ['comp_1', 'comp_2'])
swiss_i500['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 700, random_state = 42)
swiss_i700 = tsne.fit_transform(swiss_sc_df)
swiss_i700 = pd.DataFrame(swiss_i700, columns = ['comp_1', 'comp_2'])
swiss_i700['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 1000, random_state = 42)
swiss_i1000 = tsne.fit_transform(swiss_sc_df)
swiss_i1000 = pd.DataFrame(swiss_i1000, columns = ['comp_1', 'comp_2'])
swiss_i1000['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 2500, random_state = 42)
swiss_i2500 = tsne.fit_transform(swiss_sc_df)
swiss_i2500 = pd.DataFrame(swiss_i2500, columns = ['comp_1', 'comp_2'])
swiss_i2500['y'] = swiss_roll[2]

"""Vaizduojame rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Swiss_roll dataset projections with different iteration numbers', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(swiss_i300['comp_1'], swiss_i300['comp_2'], c = swiss_i300['y'])
axes[0,0].set_title('Step = 300', size=16)

axes[0,1].scatter(swiss_i400['comp_1'], swiss_i400['comp_2'], c = swiss_i400['y'])
axes[0,1].set_title('Step = 400', size=16)

axes[0,2].scatter(swiss_i500['comp_1'], swiss_i500['comp_2'], c = swiss_i500['y'])
axes[0,2].set_title('Step = 500', size=16)

axes[1,0].scatter(swiss_i700['comp_1'], swiss_i700['comp_2'], c = swiss_i700['y'])
axes[1,0].set_title('Step = 700', size=16)

axes[1,1].scatter(swiss_i1000['comp_1'], swiss_i1000['comp_2'], c = swiss_i1000['y'])
axes[1,1].set_title('Step = 1000', size=16)

axes[1,2].scatter(swiss_i2500['comp_1'], swiss_i2500['comp_2'], c = swiss_i2500['y'])
axes[1,2].set_title('Step = 2500', size=16)

plt.show()

"""Keičiame mokymosi greitį: 10, 100, 300, 500, 700, 1000"""

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 10, random_state = 42)
swiss_lr10 = tsne.fit_transform(swiss_sc_df)
swiss_lr10 = pd.DataFrame(swiss_lr10, columns = ['comp_1', 'comp_2'])
swiss_lr10['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 100, random_state = 42)
swiss_lr100 = tsne.fit_transform(swiss_sc_df)
swiss_lr100 = pd.DataFrame(swiss_lr100, columns = ['comp_1', 'comp_2'])
swiss_lr100['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 300, random_state = 42)
swiss_lr300 = tsne.fit_transform(swiss_sc_df)
swiss_lr300 = pd.DataFrame(swiss_lr300, columns = ['comp_1', 'comp_2'])
swiss_lr300['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 500, random_state = 42)
swiss_lr500 = tsne.fit_transform(swiss_sc_df)
swiss_lr500 = pd.DataFrame(swiss_lr500, columns = ['comp_1', 'comp_2'])
swiss_lr500['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 700, random_state = 42)
swiss_lr700 = tsne.fit_transform(swiss_sc_df)
swiss_lr700 = pd.DataFrame(swiss_lr700, columns = ['comp_1', 'comp_2'])
swiss_lr700['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, learning_rate = 1000, random_state = 42)
swiss_lr1000 = tsne.fit_transform(swiss_sc_df)
swiss_lr1000 = pd.DataFrame(swiss_lr1000, columns = ['comp_1', 'comp_2'])
swiss_lr1000['y'] = swiss_roll[2]

"""Vaizduojame rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Swiss_roll dataset projections with different learning rates', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(swiss_lr10['comp_1'], swiss_lr10['comp_2'], c = swiss_lr10['y'])
axes[0,0].set_title('Learning rate = 10', size=16)

axes[0,1].scatter(swiss_lr100['comp_1'], swiss_lr100['comp_2'], c = swiss_lr100['y'])
axes[0,1].set_title('Learning rate = 100', size=16)

axes[0,2].scatter(swiss_lr300['comp_1'], swiss_lr300['comp_2'], c = swiss_lr300['y'])
axes[0,2].set_title('Learning rate = 300', size=16)

axes[1,0].scatter(swiss_lr500['comp_1'], swiss_lr500['comp_2'], c = swiss_lr500['y'])
axes[1,0].set_title('Learning rate = 500', size=16)

axes[1,1].scatter(swiss_lr700['comp_1'], swiss_lr700['comp_2'], c = swiss_lr700['y'])
axes[1,1].set_title('Learning rate = 700', size=16)

axes[1,2].scatter(swiss_lr1000['comp_1'], swiss_lr1000['comp_2'], c = swiss_lr1000['y'])
axes[1,2].set_title('Learning rate = 1000', size=16)

plt.show()

"""Keičiame metrikas: euclidean, chebyshev, cosine, mahalanobis, dice, yule"""

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'euclidean', random_state = 42)
swiss_e = tsne.fit_transform(swiss_sc_df)
swiss_e = pd.DataFrame(swiss_e, columns = ['comp_1', 'comp_2'])
swiss_e['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'chebyshev', random_state = 42)
swiss_ch = tsne.fit_transform(swiss_sc_df)
swiss_ch = pd.DataFrame(swiss_ch, columns = ['comp_1', 'comp_2'])
swiss_ch['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'cosine', random_state = 42)
swiss_c = tsne.fit_transform(swiss_sc_df)
swiss_c = pd.DataFrame(swiss_c, columns = ['comp_1', 'comp_2'])
swiss_c['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'minkowski', random_state = 42)
swiss_m = tsne.fit_transform(swiss_sc_df)
swiss_m = pd.DataFrame(swiss_m, columns = ['comp_1', 'comp_2'])
swiss_m['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'dice', random_state = 42)
swiss_d = tsne.fit_transform(swiss_sc_df)
swiss_d = pd.DataFrame(swiss_d, columns = ['comp_1', 'comp_2'])
swiss_d['y'] = swiss_roll[2]

tsne = manifold.TSNE(n_components = 2, perplexity=50, n_iter = 500, metric = 'yule', random_state = 42)
swiss_yl = tsne.fit_transform(swiss_sc_df)
swiss_yl = pd.DataFrame(swiss_yl, columns = ['comp_1', 'comp_2'])
swiss_yl['y'] = swiss_roll[2]

"""Vizualizuojame rezultatus"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Swiss_roll dataset projections with different metrics', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(swiss_e['comp_1'], swiss_e['comp_2'], c = swiss_e['y'])
axes[0,0].set_title('Euclidean', size=16)

axes[0,1].scatter(swiss_ch['comp_1'], swiss_ch['comp_2'], c = swiss_ch['y'])
axes[0,1].set_title('Chebyshev', size=16)

axes[0,2].scatter(swiss_c['comp_1'], swiss_c['comp_2'], c = swiss_c['y'])
axes[0,2].set_title('Cosine', size=16)

axes[1,0].scatter(swiss_m['comp_1'], swiss_m['comp_2'], c = swiss_m['y'])
axes[1,0].set_title('Minkowski', size=16)

axes[1,1].scatter(swiss_d['comp_1'], swiss_d['comp_2'], c = swiss_d['y'])
axes[1,1].set_title('Dice', size=16)

axes[1,2].scatter(swiss_yl['comp_1'], swiss_yl['comp_2'], c = swiss_yl['y'])
axes[1,2].set_title('Yule', size=16)

plt.show()

"""**Ellipsoid**

Nuskaitome duomenis, juos standartizuojme ir sudarome lentelę
"""

ellipsoid = pd.read_csv('ellipsoid.50d10c.8.txt', sep='\t', header=None)

#kiek ellipsoid duomenu rinkinys turi eiluciu
print(ellipsoid.shape)
# daliname i dvi grupes visa ellipsoid rinkini
ellipsoid_4feat_1 = ellipsoid.iloc[:1570,]
ellipsoid_4feat_2 = ellipsoid.iloc[1570:,]

#kiek ellipsoid duomenu rinkinys turi eiluciu

print(ellipsoid_4feat_1.shape)
print(ellipsoid_4feat_2.shape)

KL_e_4feat = KL_div(ellipsoid_4feat_1, ellipsoid_4feat_2)
print("KL divergencija ellipsoid duomenu rinkinyje: %.3f" %KL_e_4feat)

ellipsoid = ellipsoid.dropna()
ellipsoid_sc = StandardScaler().fit_transform(ellipsoid)
ellipsoid_sc = pd.DataFrame(ellipsoid_sc)
ellipsoid_sc.head()

"""Keiciame perpleksiskuma"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=10, n_iter=300, random_state = 42)
ellipsoid_p10 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p10 = pd.DataFrame(ellipsoid_p10)
ellipsoid_p10.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p10['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, random_state = 42)
ellipsoid_p30 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p30 = pd.DataFrame(ellipsoid_p30)
ellipsoid_p30.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=40, n_iter=300, random_state = 42)
ellipsoid_p40 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p40 = pd.DataFrame(ellipsoid_p40)
ellipsoid_p40.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p40['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=50, n_iter=300, random_state = 42)
ellipsoid_p50 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p50 = pd.DataFrame(ellipsoid_p50)
ellipsoid_p50.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p50['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=70, n_iter=300, random_state = 42)
ellipsoid_p70 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p70 = pd.DataFrame(ellipsoid_p70)
ellipsoid_p70.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p70['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=100, n_iter=300, random_state = 42)
ellipsoid_p100 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_p100 = pd.DataFrame(ellipsoid_p100)
ellipsoid_p100.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p100['label'] =

"""Vaizdavimas"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Ellipsoid dataset projections with different perplexities', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = ellipsoid_p10,
  # hue = ellipsoid_p10['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Perplexity = 10', size=16)
#axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = ellipsoid_p30,
  # hue = ellipsoid_p30['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Perplexity = 30', size=16)
#axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = ellipsoid_p40,
  # hue = ellipsoid_p40['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Perplexity = 40', size=16)
#axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = ellipsoid_p50,
  # hue = ellipsoid_p50['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Perplexity = 50', size=16)
#axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = ellipsoid_p70,
  # hue = ellipsoid_p70['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Perplexity = 70', size=16)
#axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = ellipsoid_p100,
  # hue = ellipsoid_p100['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Perplexity = 100', size=16)
#axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""Keiciame iteraciju skaiciu"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, random_state = 42)
ellipsoid_i300 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_i300 = pd.DataFrame(ellipsoid_i300)
ellipsoid_i300.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=500, random_state = 42)
ellipsoid_i500 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_i500 = pd.DataFrame(ellipsoid_i500)
ellipsoid_i500.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=700, random_state = 42)
ellipsoid_i700 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_i700 = pd.DataFrame(ellipsoid_i700)
ellipsoid_i700.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=1000, random_state = 42)
ellipsoid_i1000 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_i1000 = pd.DataFrame(ellipsoid_i1000)
ellipsoid_i1000.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

"""Vaizduojame rezultatus"""

fig, axes = plt.subplots(2, 2, figsize = (16,12))
fig.suptitle('Ellipsoid dataset projections with different iteration numbers', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = ellipsoid_i300,
  # hue = ellipsoid_p10['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Step = 300', size=16)
#axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = ellipsoid_i500,
  # hue = ellipsoid_p30['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Step = 500', size=16)
#axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = ellipsoid_i700,
  # hue = ellipsoid_p50['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Step = 700', size=16)
#axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = ellipsoid_i1000,
  # hue = ellipsoid_p70['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Step = 1000', size=16)
#axes[1,1].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""Keiciame mokymo greiti"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 10, random_state = 42)
ellipsoid_lr10 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr10 = pd.DataFrame(ellipsoid_lr10)
ellipsoid_lr10.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 100, random_state = 42)
ellipsoid_lr100 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr100 = pd.DataFrame(ellipsoid_lr100)
ellipsoid_lr100.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 300, random_state = 42)
ellipsoid_lr300 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr300 = pd.DataFrame(ellipsoid_lr300)
ellipsoid_lr300.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 500, random_state = 42)
ellipsoid_lr500 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr500 = pd.DataFrame(ellipsoid_lr500)
ellipsoid_lr500.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 700, random_state = 42)
ellipsoid_lr700 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr700 = pd.DataFrame(ellipsoid_lr700)
ellipsoid_lr700.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, learning_rate = 1000, random_state = 42)
ellipsoid_lr1000 = tsne.fit_transform(ellipsoid_sc)
ellipsoid_lr1000 = pd.DataFrame(ellipsoid_lr1000)
ellipsoid_lr1000.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Ellipsoid dataset projections with different learning rates', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = ellipsoid_lr10,
  # hue = ellipsoid_p10['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Learning rate = 10', size=16)
#axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = ellipsoid_lr100,
  # hue = ellipsoid_p30['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Learning rate = 100', size=16)
#axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = ellipsoid_lr300,
  # hue = ellipsoid_p40['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Learning rate = 300', size=16)
#axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = ellipsoid_lr500,
  # hue = ellipsoid_p50['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Learning rate = 500', size=16)
#axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = ellipsoid_lr700,
  # hue = ellipsoid_p70['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Learning rate = 700', size=16)
#axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = ellipsoid_lr1000,
  # hue = ellipsoid_p100['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('learning rate = 1000', size=16)
#axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""KL DIVERGENCIJA"""

tsne = manifold.TSNE(n_components = 2, verbose=1, perplexity=30, n_iter=300, random_state = 42)
ellipsoid_kl = tsne.fit_transform(ellipsoid_sc)
ellipsoid_kl = pd.DataFrame(ellipsoid_kl)

"""Keiciame metrikas"""

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'euclidean', random_state = 42)
ellipsoid_e = tsne.fit_transform(ellipsoid_sc)
ellipsoid_e = pd.DataFrame(ellipsoid_e)
ellipsoid_e.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'chebyshev', random_state = 42)
ellipsoid_ch = tsne.fit_transform(ellipsoid_sc)
ellipsoid_ch = pd.DataFrame(ellipsoid_ch)
ellipsoid_ch.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'cosine', random_state = 42)
ellipsoid_c = tsne.fit_transform(ellipsoid_sc)
ellipsoid_c = pd.DataFrame(ellipsoid_c)
ellipsoid_c.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'mahalanobis', random_state = 42)
ellipsoid_m = tsne.fit_transform(ellipsoid_sc)
ellipsoid_m = pd.DataFrame(ellipsoid_m)
ellipsoid_m.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'yule', random_state = 42)
ellipsoid_d = tsne.fit_transform(ellipsoid_sc)
ellipsoid_d = pd.DataFrame(ellipsoid_d)
ellipsoid_d.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

tsne = manifold.TSNE(n_components = 2, verbose=0, perplexity=30, n_iter=300, metric = 'minkowski', random_state = 42)
ellipsoid_mn = tsne.fit_transform(ellipsoid_sc)
ellipsoid_mn = pd.DataFrame(ellipsoid_mn)
ellipsoid_mn.rename(columns = {0:'comp_1', 1:'comp_2'}, inplace = True)
# ellipsoid_p30['label'] =

"""Vizualizuojame"""

fig, axes = plt.subplots(2, 3, figsize = (16,12))
fig.suptitle('Ellipsoid dataset projections with different metrics', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

sns.scatterplot(ax=axes[0,0],
  data = ellipsoid_e,
  # hue = ellipsoid_e['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,0].set_title('Euclidean', size=16)
#axes[0,0].get_legend().remove()

sns.scatterplot(ax=axes[0,1],
  data = ellipsoid_ch,
  # hue = iris_ch['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,1].set_title('Chebyshev', size=16)
#axes[0,1].get_legend().remove()

sns.scatterplot(ax=axes[0,2],
  data = ellipsoid_c,
  # hue = iris_c['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[0,2].set_title('Cosine', size=16)
#axes[0,2].get_legend().remove()

sns.scatterplot(ax=axes[1,0],
  data = ellipsoid_m,
  # hue = iris_m['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,0].set_title('Mahalanobis', size=16)
#axes[1,0].get_legend().remove()

sns.scatterplot(ax=axes[1,1],
  data = ellipsoid_d,
  # hue = iris_d['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,1].set_title('Yule', size=16)
#axes[1,1].get_legend().remove()

sns.scatterplot(ax=axes[1,2],
  data = ellipsoid_mn,
  # hue = iris_yl['label'].tolist(),
  palette = sns.color_palette("hls", 3),
  x = "comp_1", y = "comp_2")
axes[1,2].set_title('Minkowski', size=16)
#axes[1,2].get_legend().remove()


lines, labels = axes[0,0].get_legend_handles_labels()

fig.legend(lines, labels, loc = 'lower center', ncol=3)

plt.show()

"""**MNIST**

Nuskaitome duomenis, standartizuojame
"""

mnist = pd.read_csv('mnist_train.csv')

mnist_x = mnist.loc[:,'1x1':].values
mnist_y = mnist.loc[:,'label'].values

def plot_digits(data):
    fig, axes = plt.subplots(4, 10, figsize=(10, 4),
                             subplot_kw={'xticks':[], 'yticks':[]},
                             gridspec_kw=dict(hspace=0.1, wspace=0.1))
    for i, ax in enumerate(axes.flat):
        ax.imshow(data[i].reshape(28, 28),
                  cmap='binary', interpolation='nearest',
                  clim=(0, 16))
plot_digits(mnist_x)

mnist_sc = StandardScaler().fit_transform(mnist_x)
mnist_sc_df = pd.DataFrame(mnist_sc)
mnist_sc_df.head()

x_subset = mnist_x[0:10000]
y_subset = mnist_y[0:10000]

print(np.unique(y_subset))

"""KL DIVERGENCIJA"""

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnee = TSNE(random_state = 42, n_components=2,verbose=1, perplexity=30, n_iter=500).fit_transform(x_subset)

"""Keiciame perpleksiskuma"""

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne10 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=300).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne30 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=30, n_iter=300).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne50 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=50, n_iter=300).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne100 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=100, n_iter=300).fit_transform(x_subset)

"""Vaizduojame rezultatus"""

fig, axes = plt.subplots(2, 2, figsize = (16,12))
fig.suptitle('MNIST dataset projections with different perplexities', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(tsne10[:, 0], tsne10[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,0].set_title('Perplexity = 10', size=16)

g1 = axes[0,1].scatter(tsne30[:, 0], tsne30[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,1].set_title('Perplexity = 30', size=16)

axes[1,0].scatter(tsne50[:, 0], tsne50[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,0].set_title('Perplexity = 50', size=16)

axes[1,1].scatter(tsne100[:, 0], tsne100[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,1].set_title('Perplexity = 100', size=16)

fig.colorbar(g1, shrink=1.3, boundaries=np.arange(11)-0.5).set_ticks(np.arange(10))


plt.show()

"""Keiciame iteraciju skaiciu"""

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne10300 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=300).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne10500 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne10700 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=700).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsne101000 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=1000).fit_transform(x_subset)

"""Vaizduojame rezultatus"""

fig, axes = plt.subplots(2, 2, figsize = (16,12))
fig.suptitle('MNIST dataset projections with different iteration numbers', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(tsne10300[:, 0], tsne10300[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,0].set_title('Step = 300', size=16)

g1 = axes[0,1].scatter(tsne10500[:, 0], tsne10500[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,1].set_title('Step = 500', size=16)

axes[1,0].scatter(tsne10700[:, 0], tsne10700[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,0].set_title('Step = 700', size=16)

axes[1,1].scatter(tsne101000[:, 0], tsne101000[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,1].set_title('Step = 1000', size=16)

fig.colorbar(g1, shrink=1.3, boundaries=np.arange(11)-0.5).set_ticks(np.arange(10))



plt.show()

"""Keiciame mokymo laika"""

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnelr10 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, learning_rate = 10).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnelr100 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, learning_rate = 100).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnelr500 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, learning_rate = 500).fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnelr1000 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, learning_rate = 1000).fit_transform(x_subset)

"""Viizualizuojame"""

fig, axes = plt.subplots(2, 2, figsize = (16,12))
fig.suptitle('MNIST dataset projections with different learning rates', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(tsnelr10[:, 0], tsnelr10[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,0].set_title('Learning rate = 10', size=16)

g1 = axes[0,1].scatter(tsnelr100[:, 0], tsnelr100[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,1].set_title('Learning rate = 100', size=16)

axes[1,0].scatter(tsnelr500[:, 0], tsnelr500[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,0].set_title('Learning rate = 500', size=16)

axes[1,1].scatter(tsnelr1000[:, 0], tsnelr1000[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,1].set_title('Learning rate = 1000', size=16)

fig.colorbar(g1, shrink=1.3, boundaries=np.arange(11)-0.5).set_ticks(np.arange(10))


plt.show()

"""Keiciame metrikas"""

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnee = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, metric = 'euclidean').fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnech = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, metric = 'chebyshev').fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsnem = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, metric = 'minkowski').fit_transform(x_subset)

# Commented out IPython magic to ensure Python compatibility.
# %time
tsned = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=10, n_iter=500, metric = 'yule').fit_transform(x_subset)

"""Vizualizuojame"""

fig, axes = plt.subplots(2, 2, figsize = (16,12))
fig.suptitle('MNIST dataset projections with different metrics', size=24)

sns.set_style("darkgrid") # darkgrid, whitegrid, dark, white, ticks

axes[0,0].scatter(tsnee[:, 0], tsnee[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,0].set_title('Euclidean', size=16)

g1 = axes[0,1].scatter(tsnech[:, 0], tsnech[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[0,1].set_title('Chebyshev', size=16)

axes[1,0].scatter(tsnem[:, 0], tsnem[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,0].set_title('Minkowski', size=16)

axes[1,1].scatter(tsned[:, 0], tsned[:, 1], s= 5, c=y_subset, cmap='Spectral')
axes[1,1].set_title('Yule', size=16)

fig.colorbar(g1, shrink=1.3, boundaries=np.arange(11)-0.5).set_ticks(np.arange(10))


plt.show()